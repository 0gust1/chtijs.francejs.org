{
  "name": "varstream",
  "description": "Stream variables beetween 2 JavaScript threads (client/server, ipc, worker/main thread).",
  "version": "0.2.1",
  "author": {
    "name": "Nicolas Froidure"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/nfroidure/VarStream.git"
  },
  "engines": {
    "node": ">=0.10.*"
  },
  "dependencies": {},
  "devDependencies": {
    "mocha": "~1.7.0"
  },
  "scripts": {
    "test": "mocha tests/*.mocha.js"
  },
  "keywords": [
    "variable",
    "file",
    "stream",
    "json",
    "ipc",
    "pipe",
    "format",
    "read",
    "write",
    "localization",
    "configuration"
  ],
  "main": "./src/VarStream",
  "preferGlobal": "true",
  "bin": {
    "varstream2json": "cli/varstream2json.js",
    "json2varstream": "cli/json2varstream.js"
  },
  "readme": "# VarStream   [![Build Status](https://travis-ci.org/nfroidure/VarStream.png?branch=master)](https://travis-ci.org/nfroidure/VarStream)\r\n\r\nVarStream is a variable storage and exchange format. VarStream :\r\n- is human readable/writeable : no need to be a programmer to create VarStreams.\r\n- is streamable : No need to wait the datas to be fully loaded to\r\n populate/access your program variables.\r\n- keeps backward references: you can refer to another variable of the stream\r\n in the stream itself.\r\n- merges with no loss: you can easily merge multiple varstreams.\r\n- is light: due to it's smart optimizations and syntax sugar.\r\n- is memory efficient: the garbage collector can cleanup memory before the parse\r\n ends, backward references prevent data duplication.\r\n- accept comments: keep your configuration/localization files readable.\r\n- loves circular references: transmit your variable trees with no hack.\r\n\r\n## Use cases\r\n\r\n### Smarter configuration files\r\nVarStream allows you to configure your projects in a clear and readable way.\r\n Since VarStream is merge friendly, it is particularly usefull for loading\r\n multilevel configuration files without erasing previously set contents.\r\n\r\nImagine this sample configuration file:\r\n\r\n```\r\n# Server\r\nserver.domain=example.com\r\nserver.protocols.+=http\r\nserver.protocols.+=https\r\nserver.databases.+.host=db1.example.com\r\nserver.databases.*.username=db1\r\nserver.databases.+.host=db2.example.com\r\nserver.databases.*.username=db2\r\nserver.cache.size=2048\r\n# HTML document\r\ndocument.scripts.+.uri=//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js\r\ndocument.scripts.+.uri=//ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/jquery-ui.min.js\r\n```\r\n\r\nYou could easily override some of its contents by loading this specific\r\n configuration file next to him:\r\n\r\n```\r\n# Append my custom dev TLD\r\nserver.domain+=.local\r\n# Support 1 more protocol\r\nserver.protocols.+=ws\r\n# Reset DB and set my local one\r\nserver.databases.!.host=localhost\r\nserver.databases.*.username=db1\r\n# Increase cache size (8 times)\r\nserver.cache.size*=8\r\n# Use local scripts\r\ndocument.scripts.0.uri=javascript/jquery.js\r\ndocument.scripts.1.uri=javascript/jquery-ui.js\r\n```\r\n\r\nThe same goes for internationalization files. You could load a language file and\r\n augment it with a locale file.\r\n\r\n### Sharing variable trees in realtime\r\nVarStreams particularly suits with the JavaScript messaging systems. Communicate\r\n throught different JavaScript threads (or over the Network) has never been so\r\n simple.\r\n\r\nThis is particularly usefull for data driven applications.\r\n\r\n## Test it !\r\n- [draw content before its full load](http://server.elitwork.com/experiments/pagestream/index.html).\r\n- [loading charts progressively](http://server.elitwork.com/experiments/chartstream/index.html).\r\n- [maintain a variable tree beetween many processes with web sockets] (https://github.com/nfroidure/WebSockIPC)\r\n- claim yours !\r\n\r\n## Performances\r\nCompared to JSON, VarStreams brings nice formatting with often less weight.\r\n- test1 : linear.dat [390 bytes] vs linear.json [423 bytes] => 8% smaller\r\n- test2 : arrays.dat [1244 bytes] vs arrays.json [1178 bytes] => 6% bigger\r\n- test3 : references.dat [2844 bytes] vs references.json [3314 bytes] => 16% smaller\r\n\r\n## How to use\r\nWith NodeJs :\r\n```js\r\nvar VarStream = require('varstream');\r\nvar fs = require('fs');\r\n\r\nvar scope = {}; // The root scope\r\nvar myVarStream=new VarStream(scope, 'prop');\r\n// Reading var stream from a file\r\nfs.createReadStream('test.dat').pipe(myVarStream)\r\n  .on('end', function () {\r\n  // Piping VarStream to a file\r\n\tmyVarStream.pipe(fs.createWriteStream('test2.dat'));\r\n\t});\r\n```\r\n\r\nIn the browser, you can use browserify or directly VarStreamReader and\r\n VarStreamWriter constructors.\r\n\r\n## CLI Usage\r\nVarStream comes with two CLI utilities, to use them, install VarStream globally :\r\n```sh\r\nnpm install -g varstream\r\n# Convert JSON datas to VarStream\r\njson2varstream path/to/input.json > path/to/ouput.dat\r\n# Convert VarStreams datas to JSON\r\nvarstream2json path/to/input.dat > path/to/ouput.json\r\n```\r\n\r\n## Contributing/Testing\r\nThe VarStream JavaScript library is fully tested. If you want to contribute,\r\n test your code before submitting, just run the following command with\r\n NodeJS dependencies installed :\r\n```js\r\nnpm test\r\n```\r\n\r\n## Contributors\r\n* Nicolas Froidure - @nfroidure\r\n\r\n## License\r\nThis program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\r\n\r\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/nfroidure/VarStream/issues"
  },
  "homepage": "https://github.com/nfroidure/VarStream",
  "_id": "varstream@0.2.1",
  "_from": "varstream@~0.2.0"
}
